version: '3'
services:
  # main application
  app:
    build:
      context: backend
    depends_on:
      - postgres
    volumes:
    - ./backend/logs/:/app/logs
    # NOTE: используйте volume mount для подключения папки скриптов для оркестрации
    - ./scripts/:/scripts:ro
    # Сюда уйдет collected_static после ./manage.py collectstatic
    - collected_static:/app/collected_static:rw
    restart: always
    entrypoint: ["/scripts/wait-for-it.sh", "postgres:5432", "--", "/app/entrypoint.sh"]

  # database
  postgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: postgres
    expose:
      - 5432
    ports:
    - 54325:5432
    volumes:
    - ./postgres/sql:/docker-entrypoint-initdb.d:ro
    - pg_data:/var/lib/postgresql
    restart: always

  # static files
  nginx:
    build:
      context: frontend
    depends_on:
      - app
    ports:
      - 80:80
    volumes:
    # NOTE: collected_static генерится на бекенде (ну вот так, да)
    # пока что передаем в nginx через volume mount
    - collected_static:/app/collected_static
    restart: always

  # backups with rotation
  database_backup_service:
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - ./postgres/db_backups:/backups
    links:
      - postgres
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=drec_stud_site
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      # - POSTGRES_EXTRA_OPTS=-Z6 --schema=public --blobs
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      # - BACKUP_KEEP_WEEKS=4
      # - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=8080

  # Offline passwords storage
  redis:
    image: redis
    volumes:
    - redis_data:/data
    ports:
    - 6379:6379
    expose:
      - 6379
    restart: always

  # VK bot
  vk_bot:
    build:
      context: vk_bot/
    depends_on:
      - postgres
      - redis
    volumes:
      # NOTE: используйте volume mount для подключения папки скриптов для оркестрации
    - ./scripts:/scripts:ro
    - ./vk_bot/logs:/app/logs:rw
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=drec_stud_site
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    restart: always
    entrypoint: ["/scripts/wait-for-it.sh", "redis:6379", "--", "/app/entrypoint.sh"]

  # return money for unavailable machines
  money_return_service:
    build:
      context: machine_closed_watchdog/
    depends_on:
      - postgres
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: drec_stud_site
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      # NOTE: используйте volume mount для подключения папки скриптов для оркестрации
    - ./scripts:/scripts:ro
    entrypoint: ["/scripts/wait-for-it.sh", "postgres:5432", "--", "/app/entrypoint.sh"]

  elasticsearch:
    build:
      context: elk/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elk/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    build:
      context: elk/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elk/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./elk/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: elk/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elk/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  metricbeat:
    # NOTE: надо понять, как без этого запускать
    user: root
    build:
      context: elk/metricbeat/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      # https://www.elastic.co/guide/en/beats/metricbeat/current/running-on-docker.html#monitoring-host
      - type: bind
        source: ./elk/metricbeat/config/metricbeat.yml
        target: /usr/share/metricbeat/metricbeat.yml
        read_only: true
      - type: bind
        source: /proc
        target: /hostfs/proc
        read_only: true
      - type: bind
        source: /sys/fs/cgroup
        target: /hostfs/sys/fs/cgroup
        read_only: true
      - type: bind
        source: /
        target: /hostfs
        read_only: true
      # docker monitoring
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    depends_on:
      - elasticsearch
    networks:
      - elk

networks:
  elk:
    driver: bridge

volumes:
  pg_data:
  redis_data:
  collected_static:
  elasticsearch: